[project]
name = "triangler-fastapi"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "PattyC", email = "patrickcoffey91@gmail.com" }
]
dependencies = [
    "fastapi>=0.110.0",
    "pydantic>=2.6.3",
    "alembic>=1.13.1",
    "sqlalchemy>=2.0.27",
    "uvicorn[standard]>=0.28.0",
    "scipy>=1.12.0",
    "qrcode[pil]>=7.4.2",
    "pillow>=10.2.0",
    "wheel>=0.42.0",
    "loguru>=0.7.2",
    "python-jose[cryptography]>=3.3.0",
    "starlette-admin>=0.14.0",
    "jinja2",
]
readme = "README.md"
requires-python = "==3.12.2"

#[project.scripts]
#hello = "triangler-fastapi:hello"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
virtual = true
dev-dependencies = [
    "httpx>=0.27.0",
    "pytest>=8.0.2",
    "pytest-alembic>=0.11.0",
    "pytest-mock-resources>=2.10.0",
    "ruff>=0.3.1",
    "pytest-xdist>=3.5.0",
    "pytest-watch>=4.2.0",
    "pytest-watcher>=0.4.1",
    "pre-commit>=3.6.2",
]

[tool.pytest]
pytest_alembic_tests_folder = "src/tests/alembic"

[tool.pyright]
include = ["src"]
venvPath = "."
venv = ".venv"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12.
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors (flake8)
    "W",  # pycodestyle warnings
    "F",  # pyflakes (flake8)
    "ANN",  # pyflakes annotations
    "S",  # flake8 bandit
    "RUF",  # ruff specific rules
    "I",  # isort
]
ignore = ["E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I", "ANN", "S", "RUF"]
unfixable = [
    "F841",  # dont automatically remove unused vars, will still error on them
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"src/tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/triangler_fastapi"]
